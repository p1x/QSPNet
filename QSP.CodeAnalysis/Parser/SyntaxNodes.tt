<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#

    const string Expression = "ExpressionSyntax";
    const string Statement = "StatementSyntax";
    const string Token = "SyntaxToken";
    const string SeparatedList = "SeparatedListSyntax";
    const string SeparatedExpressionList = "SeparatedListSyntax<ExpressionSyntax>";

    var expressions = new (string name, (string name, string type, bool isOptional)[] members)[] {
        ("Parenthesised", new[] {
            ("OpenParenthesis", Token, false),
            ("Expression", Expression, false),
            ("CloseParenthesis", Token, false),
        }),
        ("Binary", new[] {
            ("Left", Expression, false),
            ("Operator", Token, false),
            ("Right", Expression, false),
        }),
        ("Unary", new[] {
            ("Operator", Token, false),
            ("Operand", Expression, false),
        }),
        ("Name", new[] {
            ("Identifier", Token, false),
            ("ArrayClause", "ArrayClauseSyntax", true),
        }),
        ("Literal", new[] {
            ("Token", Token, false),
        }),
        ("Function", new [] {
            ("Keyword", Token, false),
            ("OpenParenthesis", Token, true),
            ("Arguments", SeparatedExpressionList, false),
            ("CloseParenthesis", Token, true),
        })
    };
    var statements = new (string name, (string name, string type, bool isOptional)[] members)[] {
        ("Expression", new[] {
            ("Expression", Expression, false),
        }),
        ("Assignment", new[] {
            ("Identifier", Token, false),
            ("ArrayClause", "ArrayClauseSyntax", true),
            ("Equals", Token, false),
            ("Expression", Expression, false),
        }),
        ("Procedure", new [] {
            ("Modifier", Token, true),
            ("Keyword", Token, false),
            ("OpenParenthesis", Token, true),
            ("Arguments", SeparatedExpressionList, false),
            ("CloseParenthesis", Token, true),
        })
    };
    var custom = new (string name, (string name, string type, bool isOptional)[] members)[] {
        ("ArrayClause", new[] {
            ("OpenBrace", Token, false),
            ("Expression", Expression, true),
            ("CloseBrace", Token, false),
        })
    };
#>
using System;
using System.Collections.Generic;

namespace QSP.CodeAnalysis {
<#

    void writeNodes((string name, (string name, string type, bool isOptional)[] members)[] nodes, string suffix, string baseType, (string name, string type, bool isOptional)[] baseParams) {
        foreach (var e in nodes) {
            
            var parameters = e.members.AsEnumerable();
            var baseClassCtorCall = "";
            if (baseParams != null && baseParams.Any()) {
                baseClassCtorCall += " : base(" + string.Join(", ", baseParams.Select(x => ToLocalName(x.name))) + ") ";
                parameters = parameters.Concat(baseParams);
            }
            var ctorParams = parameters.Select(x => GetTypeName(x.type, x.isOptional) + " " + ToLocalName(x.name));
            var ctorParamsStr = string.Join(", ", ctorParams);
#>
    public class <#= e.name #><#= suffix #>Syntax : <#= baseType #> {
        public <#= e.name #><#= suffix #>Syntax(<#= ctorParamsStr #>)<#= baseClassCtorCall #> {
<#
            foreach (var (name, _, isOptional) in e.members) {
#>
                <#= name #> = <#= ToLocalName(name) #><#= isOptional ? string.Empty : $" ?? throw new ArgumentNullException(nameof({ToLocalName(name)}))" #>; 
<#
            }
#>
        }

        public override Syntax<#= suffix #>Kind <#= suffix #>Kind => Syntax<#= suffix #>Kind.<#= e.name #>;

<#
            foreach (var (name, type, isOptional) in e.members) {
#>
        public <#= GetTypeName(type, isOptional) #> <#= name #> { get; }
<#
            }
#>

        public override IEnumerable<object> GetChildren() {
<#
            foreach (var (name, type, isOptional) in e.members) {
                if (isOptional) {
#>
            if (<#= name #> != null)  
<#
                    PushIndent("    ");
                }

                if (type == SeparatedList || type == SeparatedExpressionList) {
#>
            foreach (var item in <#= name #>)
                yield return item;
<#
                } else {
#>
            yield return <#= name #>;
<#
                }

                if (isOptional)
                    PopIndent();
            }
#>
        }   
    }
<#
        }
    }

    writeNodes(expressions, "Expression", "ExpressionSyntax", null);
    writeNodes(statements, "Statement", "StatementSyntax", new [] {
        ("EndToken", Token, false)
    });
    writeNodes(custom, "", "SyntaxNode", null);
#>
}

<#+
    private string ToLocalName(string name) {
        var localName = name.Substring(1).Insert(0, char.ToLower(name[0]).ToString());
        if (localName == "operator")
            return "@" + localName;
        return localName;
    }

    private string GetTypeName(string type, bool isOptional) => type + (isOptional ? "?" : "");
#>